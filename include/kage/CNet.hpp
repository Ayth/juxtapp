class CNet : public Singleton<CNet> {
  public:
    ENetHost *server;
    ENetHost *client;
    ENetAddress address;
    irr::core::array<CStatePump*, irr::core::irrAllocator<CStatePump*> > serverpumps;
    CStatePump *clientpump;
    ENetPeer *serverpeer;
    int connectingTime;
    CJoinGame joingamedata;
    irr::core::stringw serverIP;
    irr::core::stringw serverpassword;
    irr::core::stringw rconpassword;
    irr::core::stringw serverIPv6;
    std::list<tcprCommand, std::allocator<tcprCommand> > *TCPRconCommands;
    static SDL_mutex *TCPRconCommands_lock;
    SDL_Thread *tcprThread;
    int disconnectTime;
    int maxPlayers;
    int reservedSlots;
    int spectatorSlots;
    int serverPort;
    int clientPort;
    bool joinfullEnabled;
    unsigned short preferAF;
    bool tempcompression;
    bool enableIPv6;
    bool registerServer;
    bool enableTcpr;
    static bool compression;
    static bool deltacompression;
    enet_uint32 temp_key;
    irr::core::array<AttachmentNode*, irr::core::irrAllocator<AttachmentNode*> > attachmentlist;
    irr::f32 sv_deltapos_modifier;
    bool sv_compression;
    bool sv_deltacompression;
    bool sv_fastdeltas;
    int bytesSent;
    int bytesRecv;
    int packetsDropped;
    bool globalpause;
    irr::core::stringw masterip;
    int masterport;
    CMasterControl *master;
    static SDL_mutex *sAPIClient_lock;
    static SDL_mutex *sAPIClientStatus_lock;
    APIClient *sAPIClient;
    static SDL_mutex *serverList_lock;
    std::list<APIServer, std::allocator<APIServer> > serverList;
    APIServer currentServerStatus;
    minimapPNG currentServerMinimap;
    static SDL_mutex *currentServerStatus_lock;
    static SDL_mutex *currentServerMinimap_lock;
    std::list<APIThreadStatus, std::allocator<APIThreadStatus> > sAPIClientStatus;
    clientAuthRequest clientLoginRequest;
    static SDL_mutex *clientLoginRequest_lock;
    bool require_auth;
    bool gold_only;
    bool allow_globals_mods;
    bool disable_seclevoutput;
    int tcprMessagePipe;
    irr::core::array<ENetPeer*, irr::core::irrAllocator<ENetPeer*> > awaiting_peers;

    irr::core::array<CSecurityData*, irr::core::irrAllocator<CSecurityData*> > awaiting_securitydata;
    static SDL_mutex *api_lock;
    std::string client_token;
    int ping;
    int oldping;
    static bool loaded;
    irr::core::array<CNetObject*, irr::core::irrAllocator<CNetObject*> > netobjectsforsending;
    WideString servername;
    WideString serverinfo;
    WideString servermap;
    WideString servermode;
    irr::core::stringc logtraffic_file;
    bool logtraffic;
    bool logging;
    bool readinglog;
    bool initreadinglog;
    CBitStream trafficlog;
    CNetFiles *netfiles;
    irr::core::array<CNet::idtime*, irr::core::irrAllocator<CNet::idtime*> > last_votes;
    int maxallowed_ping;
    int maxallowed_ping_warnings;
    int maxallowed_hack_warnings;
    int allow_editor;
    irr::u8 packet_type;
    irr::u8 oncetype;
    bool loading;
    WideString joined_servername;
    String joined_ip;
    int server_last_ticktime;
    int client_last_ticktime;
    int client_sent_delta_tick;
    int chat_spam_timer;
    bool loggedin;

    CNet(void);
    ~CNet(int);
    bool CreateServer(void);
    bool CreateClient(void);
    void Connect(const char *, uint16);
    void Connect(enet_uint32, uint16);
    void DisconnectClient(void);
    void DisconnectServer(void);
    void WaitForDisconnect(ENetHost *);
    void DisconnectStatePump(CStatePump *);
    irr::s32 findServerPumpByPeer(ENetPeer *);
    void Update(void);
    void UpdateServer(void);
    void UpdateClient(void);
    bool onPacketReceived(bool, ENetEvent &);
    void ProcessSnapshots(bool, CStatePump *, CBitStream &);
    bool ReadPacketInSnapshot(bool, CStatePump *, CBitStream &);
    bool RecdDeltas(CBitStream &, CStatePump *);
    void SnapDeltas(CStatePump *,
    irr::core::array<CNetObject*, irr::core::irrAllocator<CNetObject*> > &);
    void server_ClientConnected(ENetEvent &);
    void server_SendSecurityCheck(ENetPeer *);
    bool server_RecdClientSecurity(CBitStream &, ENetPeer *);
    void server_CheckAuthentication(CSecurityData *);
    void server_ProcessAPIPlayer(APIPlayer *, CSecurityData *, APIRequestStatus_t);
    void server_SendGameResources(ENetPeer *);
    bool server_RecdResourcesOK(CBitStream &, ENetPeer *);
    void server_SendMap(ENetPeer *);
    bool server_RecdMapOK(CBitStream &, ENetPeer *);
    void server_SendDisconnectNotify(ENetPeer *, irr::u8);
    bool server_RecdJoinGame(CBitStream &, ENetPeer *);
    bool server_RecdChat(CBitStream &, ENetPeer *);
    void server_SnapCreate(CStatePump *,
    irr::core::array<CNetObject*, irr::core::irrAllocator<CNetObject*> > &);
    bool server_RecdRcon(CBitStream &, ENetPeer *);
    void server_SendRcon(irr::core::stringw, ENetPeer *);
    void server_SendMsg(irr::core::stringw, irr::u8);
    void server_SendMsg(irr::core::stringw, ENetPeer *, irr::u8);
    void server_SendMsgToMods(irr::core::stringw, irr::u8);
    void server_SendRespawn(irr::u32, ENetPeer *);
    void server_SendKill(CPlayer *, CPlayer *, irr::u8);
    bool server_RecdClientPreview(CBitStream &, ENetPeer *);
    void server_SendSeclev(ENetPeer *);
    void server_SendSeclev(ENetPeer *, CPlayer *);
    void server_SendSeclev(ENetPeer *, std::string, std::string, bool, bool);
    void client_Connected(ENetEvent &);
    bool client_RecdSecurityCheck(CBitStream &, ENetPeer *);
    bool client_SendTokenRequest(void);
    bool client_RecdResources(CBitStream &, ENetPeer *);
    bool client_DisconnectNotify(CBitStream &);
    bool client_RecdMap(CBitStream &, ENetPeer *);
    void client_SendJoinGame(void);
    void client_SendChat(irr::core::stringw, irr::u8);
    bool client_RecdChat(CBitStream &, ENetPeer *);
    void client_SendRcon(irr::core::stringw);
    bool client_RecdRcon(CBitStream &, ENetPeer *);
    bool client_RecdPenalty(CBitStream &, ENetPeer *);
    bool client_RecdMsg(CBitStream &, ENetPeer *);
    void client_SendMarkPlayer(ENetPeer *, CPlayer *, irr::u8);
    bool client_RecdRespawn(CBitStream &, ENetPeer *);
    bool client_RecdKill(CBitStream &, ENetPeer *);
    bool client_RecdSeclev(CBitStream &, ENetPeer *);
    bool client_StartGame(void);
    bool client_recdProjectile(CBitStream &);
    bool client_recdRocks(CBitStream &);
    void setPaused(bool);
    void SendToPeer(CBitStream &, ENetPeer *);
    void SendSequenced(CBitStream &, ENetPeer *);
    void ServerSendToAll(CBitStream &);
    void ServerPumpOnce(CBitStream &, irr::u8, CStatePump *);
    void ServerPumpOnceToAll(CBitStream &, irr::u8);
    void ServerPumpOnceToAllExcept(CBitStream &, irr::u8, ENetPeer *);
    bool isAuthenticated(void);
    bool pushTcprMessage(std::string);
    int getAwaitingPeerIndex(enet_uint32);
    void DeleteSecurityData(ENetPeer *);
    bool isClientConnected(void);
    void DeleteNetObjects(void);
    void DebugDump(CBitStream &);
    void StartLogging(void);
    void EndLogging(void);
    void LogPacket(CBitStream &, irr::u8);
    void LogTick(void);
    void StartReadingLog(const char *);
    void EndReadingLog(void);
    bool ReadLog(CBitStream &);
    enet_uint32 Get_ENet_IP(String);
    String Make_Formatted_IP(enet_uint32);
    String Make_Formatted_IP(CNet::idtime *);
    String Make_Formatted_Disconnect_Reason(int);
    CNet::idtime * getLastVotebyIP(enet_uint32);
    CNet::idtime * getLastVoteByHID(enet_uint32);
    bool isLANHost(enet_uint32);
    void AttachObjects(void);
    void SendClientSnapshot(void);
    void Speedhack(CStatePump *);
    void ShowStatusMsg(APIRequestStatus_t, std::string, std::string, std::string);
}
