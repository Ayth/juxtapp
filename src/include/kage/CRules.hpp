 class CRules {
  public:
    std::string gamemode_name;
    std::string gamemode_info;
    bool itempick_mode;
    bool autoassign_teams;
    bool autoassign_classes;
    bool autoassign_inventory;
    irr::s16 match_time_override;
    irr::u16 daycycle_speed;
    irr::f32 daycycle_start;
    irr::u16 break_time;
    irr::s16 break_time_static_override;
    irr::u8 match_time_formula_a;
    irr::u8 match_time_formula_b;
    irr::s8 timepassed_teamwin;
    irr::s8 minimum_players_inteam;
    float playerrespawn_seconds;
    float nearspawn_multiplier;
    irr::s16 death_points;
    irr::s16 kill_points;
    irr::s16 selfkill_points;
    irr::s16 itempick_points;
    float attackdamage_modifier;
    float falldamage_modifier;
    float falldamage_threshold;
    float falldamage_constant;
    float friendlydamage_modifier;
    bool wall_hit_damage;
    irr::s16 build_speed;
    irr::s16 builder_hitspeed;
    irr::s16 knight_drawtime;
    irr::s16 knight_maxthrow;
    irr::s16 knight_maxpower;
    irr::s16 knight_speed;
    float shield_stomp_velocity;
    irr::s16 max_bombs;
    irr::s16 build_arrow_speed;
    irr::s16 archer_dig_speed;
    irr::s16 archer_drawtime;
    irr::s16 sword_knockdown;
    irr::s16 small_sword_knockdown;
    irr::s16 arrow_knockdown;
    irr::s16 charged_arrow_knockdown;
    irr::s16 arrows_buy_amount;
    irr::s16 resupply_time;
    irr::f32 builder_hit_damage;
    bool knight_reset_timer_on_hit;
    irr::f32 knight_jab_damage;
    irr::f32 knight_slash_damage;
    irr::s16 archer_maxpower;
    float archer_nodamage_vel;
    float archer_max_vel;
    float archer_slow_arrow_damage;
    float archer_normal_arrow_damage;
    float archer_charged_arrow_damage;
    bool archer_shoot_arrow_ondeath;
    float min_shieldbash_horiz_vel;
    float max_shieldbash_push;
    float shieldbash_push_factor;
    float shieldbash_uppysidey_ratio;
    irr::s16 shieldbash_knockdown;
    bool clientside_shieldbash;
    bool can_shieldbash;
    bool collide_when_crouching;
    irr::f32 stomp_vel;
    irr::f32 stomp_weak_damage;
    irr::f32 stomp_strong_damage;
    bool can_glide_when_bombjumping;
    irr::f32 bomb_jump_scale;
    bool map_bedrock_indestructible;
    bool map_indestructible;
    irr::u8 mapresource_thickstone;
    irr::u8 mapresource_stone;
    irr::u8 mapresource_tree;
    irr::u8 mapresource_arrow;
    irr::u8 mapresource_gold;
    bool no_shadowing;
    int swap_team_cooldown;
    bool balance_teams_on_nextmap;
    bool unlimited_ammo;
    bool unlimited_resources;
    irr::u8 force_weightclass;
    irr::u8 fog_of_war;
    bool auto_bots;
    bool switch_teams_onrestart;
    bool new_sacks_in_tent;
    irr::u8 sacks_count;
    irr::u8 gold_score_percentage;
    irr::u8 heart_fallout_probability;
    bool flags_respawn;
    bool flags_return;
    irr::u8 flags_count;
    irr::u8 flags_score;
    bool spawn_tent_onstart;
    bool restartmap_onlastplayer_disconnect;
    bool nocollapsing_nearspawn;
    bool mirrormap;
    irr::u8 coins_death_drop_percentage;
    irr::u8 coins_damage_enemy;
    irr::u8 coins_build_percentage;
    irr::u8 coins_bomb_cost;
    irr::u8 coins_arrows_cost;
    irr::u8 coins_heal_cost;
    String room_config;
    String zombie_portal_config;
    bool party_mode;
    bool warmup_barrier;
    String director_config;
    bool output_history;
    irr::u8 player_light_radius;
    bool minimap;
    irr::u8 max_zoom_out;
    irr::f32 zoom_level_1;
    irr::f32 zoom_level_2;
    irr::f32 zoom_level_3;
    int spectatorSlots;
    irr::s16 water_levelchange_time;
    bool water_suddendeath;
    irr::s32 support_factor;
    irr::s32 support_added_vertical;
    irr::s32 support_cost_ladder;
    irr::s32 support_cost_bridge;
    irr::s32 support_cost_castle;
    irr::s32 support_cost_wood;
    irr::core::array<CTeam*, irr::core::irrAllocator<CTeam*> > teams;
    bool waitingforplayers;
    int timemins;
    int timesecs;
    int sumsecs;
    int timemsecs;
    int breaksecs;
    int time_elapsed;
    CNetVariable<int, 10u, 1800> timeticks;
    CNetVariable<int, 11u, 60> breakticks;
    CNetVariable<unsigned char, 17u, 0> matchrunning;
    CNetVariable<int, 21u, 600> playedticks;
    irr::u8 old_matchrunning;

    CNetVariable<irr::core::string<wchar_t, irr::core::irrAllocator<wchar_t> >, 18u, 0> endgamemsg;
    irr::s32 ratcache;
    bool loaded;
    int restartmap_counter;
    int endgame_counter;
    WideString killmessage;
    int killmessage_time;
    bool ismatchwon;
    bool do_ingame_autobalance;
    irr::f32 autobalance_tolerance;
    irr::f32 red_team_size_ratio;
    std::vector<unsigned short, std::allocator<unsigned short> > players_needing_balance_ids;
    irr::s8 reset_wait;
    CDirector *director;
    bool spawn_gargoyle_now;
    std::string filename;

    CRules(const irr::c8 *);
    ~CRules(int);
    virtual void Think(void);
    virtual void Render(void);
    virtual void OnPlayerJoin(CPlayer *);
    virtual void OnNewPlayerJoin(CPlayer *);
    virtual void OnPlayerLeave(CPlayer *);
    virtual void OnPlayerQueue(CRespawnQueueActor *);
    virtual void OnPlayerTakeDamage(CPlayer *, CPlayer *, irr::f32 &);
    virtual void OnPlayerDie(CPlayer *, CPlayer *, irr::u8);
    virtual void OnPlayerRespawn(CRespawnQueueActor *);
    virtual void OnItemCollected(CPlayer *, const char *);
    CClass * getPlayerClass(CPlayer *);
    CTeam * getPlayerTeam(CPlayer *);
    CTeam * getTeam(int);
    CClass * getClass(int, int);
    bool Unserialize(CBitStream &);
    bool Serialize(CBitStream &);
    bool checkStartMatch(void);
    bool checkEndMatch(void);
    void StartMatch(void);
    void EndMatch(void);
    void RestartRules(void);
    void RespawnPenalties(void);
    void SpawnEggs(void);
    void KillMessage(CPlayer *, CPlayer *, irr::u8);
    bool isMatchWon(void);
    bool needAutobalance(void);
    int needAutobalanceAgainstTeam(void);
    void swapPlayerForBalanceIfNeeded(CPlayer *);
    void queuePlayerForBalance(CPlayer *);
    void doAutoBalance(void);
    void SetBreakTime(void);
    bool isWarmup(void);
    bool isBarrier(void);
    bool isMatchRunning(void);
    bool unitsLeftForTeam(irr::u8);
    void CalculatePartyUnits(void);
    bool isPartyAliveOrQuarters(void);
    void PreloadAllConfigs(void);
}